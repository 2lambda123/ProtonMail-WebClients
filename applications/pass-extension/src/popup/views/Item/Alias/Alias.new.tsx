import { type VFC, useEffect, useState } from 'react';

import { Form, FormikProvider, useFormik } from 'formik';
import { c } from 'ttag';
import uniqid from 'uniqid';

import { getEpoch } from '@proton/pass/utils/time/get-epoch';

import { useAliasOptions } from '../../../../shared/hooks/useAliasOptions';
import { ItemNewProps } from '../../../../shared/items';
import { deriveAliasPrefixFromName } from '../../../../shared/items/alias';
import { FieldsetCluster } from '../../../components/Controls/FieldsetCluster';
import { ValueControl } from '../../../components/Controls/ValueControl';
import { Field } from '../../../components/Fields/Field';
import { TextAreaFieldWIP } from '../../../components/Fields/TextareaField';
import { TitleField } from '../../../components/Fields/TitleField';
import { ItemCreatePanel } from '../../../components/Panel/ItemCreatePanel';
import { usePopupContext } from '../../../context';
import { AliasForm } from './Alias.form';
import { NewAliasFormValues, validateNewAliasForm } from './Alias.validation';

const FORM_ID = 'new-alias';

export const AliasNew: VFC<ItemNewProps<'alias'>> = ({ shareId, onSubmit, onCancel }) => {
    const [ready, setReady] = useState(false);

    const { realm, subdomain } = usePopupContext();
    const isValidURL = realm !== undefined;
    const url = subdomain !== undefined ? subdomain : realm;
    const defaultName = isValidURL ? url! : '';

    const form = useFormik<NewAliasFormValues>({
        initialValues: {
            name: defaultName,
            note: isValidURL ? c('Placeholder').t`Used on ${url}` : '',
            shareId,
            aliasPrefix: '',
            aliasSuffix: undefined,
            mailboxes: [],
        },
        onSubmit: ({ name, note, shareId, aliasPrefix, aliasSuffix, mailboxes }) => {
            if (aliasPrefix !== undefined && aliasSuffix !== undefined) {
                const optimisticId = uniqid();

                onSubmit({
                    type: 'alias',
                    optimisticId,
                    shareId,
                    createTime: getEpoch(),
                    metadata: {
                        name,
                        note,
                        itemUuid: optimisticId,
                    },
                    content: {},
                    extraFields: [],
                    extraData: {
                        mailboxes,
                        prefix: aliasPrefix,
                        signedSuffix: aliasSuffix.signature,
                        aliasEmail: aliasPrefix + aliasSuffix.value,
                    },
                });
            }
        },
        validate: validateNewAliasForm,
        validateOnChange: true,
        validateOnMount: true,
    });

    const { aliasOptions, aliasOptionsLoading } = useAliasOptions({
        shareId,
        onAliasOptionsLoaded: async (aliasOptions) => {
            const firstSuffix = aliasOptions.suffixes?.[0];
            const firstMailBox = aliasOptions.mailboxes?.[0];

            await form.setValues(
                (values) => ({
                    ...values,
                    ...(firstSuffix && { aliasSuffix: firstSuffix }),
                    ...(firstMailBox && { mailboxes: [firstMailBox] }),
                }),
                true
            );

            setReady(true);
        },
    });

    const {
        values: { name, aliasPrefix, aliasSuffix },
        touched: { aliasPrefix: aliasPrefixTouched },
        setFieldValue,
    } = form;

    useEffect(() => {
        async function fillAutoGeneratedAlias() {
            if (!aliasPrefixTouched) {
                try {
                    await setFieldValue('aliasPrefix', deriveAliasPrefixFromName(name), true);
                } catch (_) {}
            }
        }

        void fillAutoGeneratedAlias();
    }, [name, aliasPrefixTouched, setFieldValue]);

    const aliasEmail = `${aliasPrefix === '' && !aliasPrefixTouched ? '<prefix>' : aliasPrefix}${
        aliasSuffix?.value ?? '<suffix>'
    }`;

    const valid = ready && form.isValid;

    return (
        <ItemCreatePanel type="alias" formId={FORM_ID} handleCancelClick={onCancel} valid={valid}>
            <FormikProvider value={form}>
                <Form id={FORM_ID}>
                    <FieldsetCluster>
                        <Field
                            name="name"
                            label={c('Label').t`Title`}
                            autoFocus
                            placeholder={c('Label').t`Untitled`}
                            component={TitleField}
                        />
                    </FieldsetCluster>

                    <FieldsetCluster mode="read" as="div">
                        <ValueControl icon="alias" label={c('Label').t`Alias address`}>
                            {aliasEmail}
                        </ValueControl>
                    </FieldsetCluster>

                    <AliasForm<NewAliasFormValues>
                        aliasOptions={aliasOptions}
                        aliasOptionsLoading={aliasOptionsLoading}
                        form={form}
                    />

                    <FieldsetCluster>
                        <Field
                            name="note"
                            label={c('Label').t`Note`}
                            placeholder={c('Placeholder').t`Enter a note ...`}
                            component={TextAreaFieldWIP}
                            icon="note"
                        />
                    </FieldsetCluster>
                </Form>
            </FormikProvider>
        </ItemCreatePanel>
    );
};
